# -*- coding: utf-8 -*-
"""Serialization_Deserialization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ufEjtWJIs-Xjvg_P0ymeQs5TZ4OhS_WI
"""

import json
from datetime import date, datetime
from decimal import Decimal

!pip install marshmallow

from marshmallow import Schema, fields, post_load


# Stock and Trade Classes
class Stock:
    def __init__(self, symbol, date, open, high, low, close, volume):
        self.symbol = symbol
        self.date = date
        self.open = open
        self.high = high
        self.low = low
        self.close = close
        self.volume = volume

    def __repr__(self):
        return f"Stock({self.symbol}, {self.date}, {self.open}, {self.high}, {self.low}, {self.close}, {self.volume})"

class Trade:
    def __init__(self, symbol, timestamp, action, price, quantity, commission):
        self.symbol = symbol
        self.timestamp = timestamp
        self.action = action
        self.price = price
        self.quantity = quantity
        self.commission = commission

    def __repr__(self):
        return f"Trade({self.symbol}, {self.timestamp}, {self.action}, {self.price}, {self.quantity}, {self.commission})"

# Custom Encoder
class CustomEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, (Stock, Trade)):
            return obj.__dict__
        if isinstance(obj, Decimal):
            return str(obj)  # Serialize Decimal as string
        return super().default(obj)

# Custom Decoder
def custom_decoder(dct):
    if 'symbol' in dct and 'date' in dct:  # Detect Stock
        return Stock(**dct)
    elif 'timestamp' in dct:  # Detect Trade
        return Trade(**dct)
    return dct

# Marshmallow Schemas
class StockSchema(Schema):
    symbol = fields.Str()
    date = fields.Date()
    open = fields.Decimal()
    high = fields.Decimal()
    low = fields.Decimal()
    close = fields.Decimal()
    volume = fields.Int()

    @post_load
    def make_stock(self, data, **kwargs):
        return Stock(**data)

class TradeSchema(Schema):
    symbol = fields.Str()
    timestamp = fields.DateTime()
    action = fields.Str()
    price = fields.Decimal()
    quantity = fields.Int()
    commission = fields.Decimal()

    @post_load
    def make_trade(self, data, **kwargs):
        return Trade(**data)

# Serialization and Deserialization with Marshmallow
def serialize_with_marshmallow(obj):
    if isinstance(obj, (Stock, Trade)):
        if isinstance(obj, Stock):
            return StockSchema().dump(obj)
        return TradeSchema().dump(obj)
    return None

def deserialize_with_marshmallow(json_str, schema):
    return schema.load(json.loads(json_str))

